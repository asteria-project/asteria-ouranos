/*!
 * Asteria Ouranos Node Module
 * Copyright(c) 2019 Pascal ECHEMANN
 * MIT Licensed
 * This is a part of the Asteria Project: <https://github.com/asteria-project>
 */

declare module "asteria-ouranos" {

import {AbstractAsteriaObject, AsteriaSessionConfig, AsteriaSession, StreamProcessConfig, StreamProcess, AsteriaContext, AsteriaLogger, StreamProcessor, AsteriaFilter, FilterOperator, FilterOperatorNotation, AsteriaStream, AsteriaErrorCode, AsteriaError, StreamProcessBuilder, AsteriaLogLevel} from "asteria-gaia";

export class Ouranos extends AbstractAsteriaObject {    private static readonly CLASS_NAME;    constructor();    static createSession(config: AsteriaSessionConfig): AsteriaSession;    static buildProcess(processClass: any, config?: StreamProcessConfig): StreamProcess;    private static checkConfig;}export class OuranosContext extends AbstractAsteriaObject implements AsteriaContext {    private readonly NAME;    private readonly GUID;    private readonly PROCESSOR;    constructor(name: string, uuid: string);    getLogger(): AsteriaLogger;    getName(): string;    getId(): string;    getProcessor(): StreamProcessor;}export class OuranosSession extends AbstractAsteriaObject implements AsteriaSession {    private readonly CONTEXT;    constructor(config: AsteriaSessionConfig);    getContext(): AsteriaContext;}export class EndsWithFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class EqualFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class GreaterThanFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class LikeFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class LowerThanFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class NotEqualFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class NotLikeFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class StartsWithFilter extends AbstractAsteriaObject implements AsteriaFilter {    readonly operators: Array<FilterOperator | FilterOperatorNotation | string>;    constructor();    apply(obj: any, property: string, value: any): boolean;}export class OuranosFilterManager extends AbstractAsteriaObject {    private static _instance;    private _filterMap;    private constructor();    static getInstance(): OuranosFilterManager;    private init;    register(filter: AsteriaFilter): void;    getFilter(operator: string): AsteriaFilter;}export class Uuid extends AbstractAsteriaObject {    constructor();    static v4(): string;}export class OuranosProcessor extends AbstractAsteriaObject implements StreamProcessor {    private readonly CONTEXT;    private readonly LOG_ID;    private readonly PROCESSES;    private _timestamp;    constructor(context: OuranosContext);    add(process: StreamProcess): StreamProcessor;    remove(process: StreamProcess): StreamProcessor;    size(): number;    run(): AsteriaStream;    private onprocessComplete;    private getProcessIndex;}export class OuranosErrorBuilder extends AbstractAsteriaObject {    private static _instance;    private constructor();    static getInstance(): OuranosErrorBuilder;    build(code: AsteriaErrorCode, className: string, message: string, stack?: string): AsteriaError;}export class OuranosProcessBuilder extends AbstractAsteriaObject implements StreamProcessBuilder, AsteriaObject {    private static _instance;    private constructor();    static getInstance(): StreamProcessBuilder;    build(processClass: any, config?: StreamProcessConfig): StreamProcess;}export class LogIdUtils {    static getLogId(context: OuranosContext): string;}export class OuranosLogger extends AbstractAsteriaObject implements AsteriaLogger {    private static _instance;    private readonly LOGGER;    private _logLevel;    private constructor();    static getLogger(): AsteriaLogger;    getLogLevel(): AsteriaLogLevel;    setLogLevel(level: AsteriaLogLevel): void;    log(level: AsteriaLogLevel, message: string): void;    info(message: string): void;    debug(message: string): void;    warn(message: string): void;    error(message: string): void;    fatal(message: string): void;}}